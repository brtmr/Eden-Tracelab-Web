// Generated by CoffeeScript 1.4.0
var STATES;

STATES = ["#8CED87", "#F5FF85", "#7B84E0", "#E87D9C"];

$(function() {
  var barheight, canvas, clear, context, data, draw, drawEvent, drawTickLine, height, load_machine_events_initial, load_trace_info, margin, populate_options, trace_loaded, trace_metadata, tracelist_data, update_tracelist, width, x, xAxis, xAxisContainer, xAxisSvg, zoom, zoomHandler;
  tracelist_data = [];
  trace_metadata = {};
  trace_loaded = false;
  update_tracelist = function() {
    return $.post("/traces", {}, function(data, status) {
      if (status !== "success") {
        alert("failed to fetch trace list");
        return;
      }
      tracelist_data = data;
      return populate_options();
    });
  };
  populate_options = function() {
    var x, _i, _len, _results;
    $("#trace_list").find("option").remove();
    _results = [];
    for (_i = 0, _len = tracelist_data.length; _i < _len; _i++) {
      x = tracelist_data[_i];
      _results.push($("#trace_list").append("<option value=\"" + x.id + "\">" + x.filename + "</option>"));
    }
    return _results;
  };
  load_trace_info = function(id) {
    return $.post("/traceinfo", {
      "id": id
    }, function(data, status) {
      if (status !== "success") {
        alert("failed to load trace metadata.");
        return;
      }
      trace_metadata.machines = data;
      trace_metadata.num_machines = data.length;
      return $.post("/duration", {
        "id": id
      }, function(dur, status) {
        if (status !== "success") {
          alert("failed to load trace metadata.");
          return;
        }
        trace_metadata.duration = dur[0];
        return trace_metadata.id = id;
      });
    });
  };
  load_machine_events_initial = function() {};
  $("#update_button").click(update_tracelist);
  $("#load_button").click(function() {
    var id;
    id = $("#trace_list").val();
    return load_trace_info(id);
  });
  data = {};
  margin = {
    top: 50,
    right: 50,
    bottom: 50,
    left: 10
  };
  width = 1300 - margin.left - margin.right;
  height = 500 - margin.top - margin.bottom;
  x = d3.scale.linear().domain([0, data.endtime]).range([0, width]);
  xAxis = d3.svg.axis().scale(x).orient("bottom").ticks(10);
  zoomHandler = function() {
    var scale, translate;
    translate = d3.event.translate[0];
    scale = d3.event.scale;
    xAxisContainer.call(xAxis);
    return draw();
  };
  zoom = d3.behavior.zoom().x(x).on("zoom", zoomHandler);
  canvas = d3.select("body").append("canvas").attr("width", width + margin.left + margin.right).attr("height", height + margin.top).call(zoom);
  context = canvas.node().getContext("2d");
  canvas.on("mousemove", function() {
    var cos;
    cos = d3.mouse(this);
    draw();
    context.beginPath();
    context.moveTo(cos[0], 0);
    context.lineTo(cos[0], height + margin.top);
    context.stroke();
    context.fillStyle = "black";
    context.font = "bold 12px sans-serif";
    return context.fillText(x.invert(cos[0]), cos[0], cos[1]);
  });
  xAxisSvg = d3.select("body").append("svg").attr("width", width + margin.left + margin.right).attr("height", margin.bottom).append("g");
  xAxisContainer = xAxisSvg.append("g").attr("class", "axis").attr("transform", "translate(" + margin.left + ",0)").call(xAxis);
  barheight = 0.8 * height / data.machines;
  drawEvent = function(e) {
    context.fillStyle = STATES[e.state];
    return context.fillRect(margin.left + x(e.start), margin.top + e.id_ * height / data.machines, x(e.end) - x(e.start), barheight);
  };
  drawTickLine = function(d) {
    var linePos;
    context.beginPath();
    linePos = Math.floor(margin.left + x(d)) + 0.5;
    context.moveTo(linePos, 0);
    context.lineTo(linePos, height + margin.top);
    return context.stroke();
  };
  clear = function() {
    return context.clearRect(0, 0, canvas.node().width, canvas.node().height);
  };
  draw = function() {
    var d, e, ticks, _i, _j, _len, _len1, _ref, _results;
    ticks = xAxis.scale().ticks(xAxis.ticks()[0]);
    clear();
    _ref = data.events;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      e = _ref[_i];
      drawEvent(e);
    }
    _results = [];
    for (_j = 0, _len1 = ticks.length; _j < _len1; _j++) {
      d = ticks[_j];
      _results.push(drawTickLine(d));
    }
    return _results;
  };
  draw();
});
